---
globs: *.php
description: Laravel API and service layer conventions
---

# Laravel API & Service Layer Conventions

## Controller Patterns

### RESTful API Controllers
Follow Laravel resource controller conventions:

```php
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Log;

class ResourceController extends Controller
{
    public function index(): JsonResponse
    {
        try {
            $data = Model::paginate(15);
            return response()->json([
                'success' => true,
                'data' => $data
            ]);
        } catch (\Exception $e) {
            Log::error('Error fetching resources: ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'message' => 'Error fetching resources'
            ], 500);
        }
    }
    
    public function store(Request $request): JsonResponse
    {
        $request->validate([
            'field' => 'required|string|max:255',
        ]);
        
        try {
            $resource = Model::create($request->validated());
            return response()->json([
                'success' => true,
                'message' => 'Resource created successfully',
                'data' => $resource
            ], 201);
        } catch (\Exception $e) {
            Log::error('Error creating resource: ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'message' => 'Error creating resource'
            ], 500);
        }
    }
}
```

### Webhook Controllers
For webhook handlers (like [VapiWebhookController](mdc:app/Http/Controllers/VapiWebhookController.php)):

```php
public function handleWebhook(Request $request)
{
    try {
        $payload = $request->all();
        
        // Log webhook receipt
        Log::info('Webhook received', [
            'type' => $payload['type'] ?? 'unknown',
            'timestamp' => now()->toISOString()
        ]);
        
        // Validate required fields
        if (!$this->validateWebhookPayload($payload)) {
            return response()->json([
                'success' => false, 
                'message' => 'Invalid payload'
            ], 400);
        }
        
        // Process webhook
        $result = $this->processWebhook($payload);
        
        return response()->json(['success' => true]);
    } catch (\Exception $e) {
        Log::error('Webhook processing error: ' . $e->getMessage());
        return response()->json([
            'success' => false,
            'message' => 'Processing error'
        ], 500);
    }
}
```

## Service Layer Patterns

### Service Class Structure
Create dedicated service classes in [app/Services/](mdc:app/Services/) for:
- External API integrations (VapiService, StripeService, TwilioService)
- Complex business logic
- Data processing and transformation

```php
<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class ExternalApiService
{
    protected $baseUrl;
    protected $apiKey;
    
    public function __construct()
    {
        $this->baseUrl = config('services.external.base_url');
        $this->apiKey = config('services.external.api_key');
        
        if (!$this->apiKey) {
            Log::error('API key not configured');
        }
    }
    
    public function makeRequest(string $endpoint, array $data = []): ?array
    {
        try {
            $response = Http::withHeaders([
                'Authorization' => 'Bearer ' . $this->apiKey,
                'Content-Type' => 'application/json',
            ])->post($this->baseUrl . $endpoint, $data);
            
            if ($response->successful()) {
                return $response->json();
            }
            
            Log::error('API Error', [
                'status' => $response->status(),
                'body' => $response->body()
            ]);
            return null;
        } catch (\Exception $e) {
            Log::error('Service Error: ' . $e->getMessage());
            return null;
        }
    }
}
```

### Data Processing Services
For complex data processing (like [CallLogsProcessor](mdc:app/Services/CallLogsProcessor.php)):

```php
public function processData(array $data): ?Model
{
    try {
        // Validate input data
        if (!$this->validateInput($data)) {
            Log::warning('Invalid input data', ['data' => $data]);
            return null;
        }
        
        // Transform data
        $transformedData = $this->transformData($data);
        
        // Create or update model
        $model = Model::updateOrCreate(
            ['unique_field' => $transformedData['unique_field']],
            $transformedData
        );
        
        // Additional processing
        $this->performAdditionalProcessing($model);
        
        return $model;
    } catch (\Exception $e) {
        Log::error('Data processing error', [
            'error' => $e->getMessage(),
            'data' => $data
        ]);
        return null;
    }
}
```

## Error Handling Standards

### Consistent Error Responses
- Always return JSON responses for API endpoints
- Include `success` boolean field
- Provide meaningful error messages
- Log errors with context

### Exception Handling
- Wrap risky operations in try-catch blocks
- Log errors with relevant context data
- Return appropriate HTTP status codes
- Don't expose sensitive information in error responses

## Logging Standards

### Structured Logging
Use structured logging with context:

```php
Log::info('Operation completed', [
    'user_id' => $user->id,
    'operation' => 'resource_creation',
    'resource_id' => $resource->id,
    'timestamp' => now()->toISOString()
]);

Log::error('Operation failed', [
    'error' => $exception->getMessage(),
    'user_id' => $user->id ?? null,
    'input_data' => $sanitizedData,
    'trace' => $exception->getTraceAsString()
]);
```

### Log Levels
- `info()` - Successful operations, important events
- `warning()` - Recoverable errors, invalid input
- `error()` - Failures, exceptions
- `debug()` - Development debugging (not in production)

## Configuration Management

### Environment Variables
- Store sensitive data in `.env` file
- Use `config()` helper to access configuration
- Validate required configuration in service constructors
- Provide meaningful error messages for missing config

### Service Configuration
Create dedicated config files for services:

```php
// config/services.php
return [
    'vapi' => [
        'api_key' => env('VAPI_API_KEY'),
        'base_url' => env('VAPI_BASE_URL', 'https://api.vapi.ai'),
    ],
    'stripe' => [
        'secret_key' => env('STRIPE_SECRET_KEY'),
        'webhook_secret' => env('STRIPE_WEBHOOK_SECRET'),
    ],
];
```